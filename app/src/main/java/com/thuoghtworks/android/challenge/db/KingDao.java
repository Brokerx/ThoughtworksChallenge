package com.thuoghtworks.android.challenge.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "KING".
*/
public class KingDao extends AbstractDao<King, Long> {

    public static final String TABLENAME = "KING";

    /**
     * Properties of entity King.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Rating = new Property(2, Float.class, "rating", false, "RATING");
        public final static Property Total_won_count = new Property(3, Integer.class, "total_won_count", false, "TOTAL_WON_COUNT");
        public final static Property Total_loss_count = new Property(4, Integer.class, "total_loss_count", false, "TOTAL_LOSS_COUNT");
        public final static Property Attack_won_count = new Property(5, Integer.class, "attack_won_count", false, "ATTACK_WON_COUNT");
        public final static Property Defend_won_count = new Property(6, Integer.class, "defend_won_count", false, "DEFEND_WON_COUNT");
        public final static Property Btype_pitched_count = new Property(7, Integer.class, "btype_pitched_count", false, "BTYPE_PITCHED_COUNT");
        public final static Property Btype_ambush_count = new Property(8, Integer.class, "btype_ambush_count", false, "BTYPE_AMBUSH_COUNT");
        public final static Property Btype_seige_count = new Property(9, Integer.class, "btype_seige_count", false, "BTYPE_SEIGE_COUNT");
        public final static Property Btype_razing_count = new Property(10, Integer.class, "btype_razing_count", false, "BTYPE_RAZING_COUNT");
    };


    public KingDao(DaoConfig config) {
        super(config);
    }
    
    public KingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"RATING\" REAL," + // 2: rating
                "\"TOTAL_WON_COUNT\" INTEGER," + // 3: total_won_count
                "\"TOTAL_LOSS_COUNT\" INTEGER," + // 4: total_loss_count
                "\"ATTACK_WON_COUNT\" INTEGER," + // 5: attack_won_count
                "\"DEFEND_WON_COUNT\" INTEGER," + // 6: defend_won_count
                "\"BTYPE_PITCHED_COUNT\" INTEGER," + // 7: btype_pitched_count
                "\"BTYPE_AMBUSH_COUNT\" INTEGER," + // 8: btype_ambush_count
                "\"BTYPE_SEIGE_COUNT\" INTEGER," + // 9: btype_seige_count
                "\"BTYPE_RAZING_COUNT\" INTEGER);"); // 10: btype_razing_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, King entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Float rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(3, rating);
        }
 
        Integer total_won_count = entity.getTotal_won_count();
        if (total_won_count != null) {
            stmt.bindLong(4, total_won_count);
        }
 
        Integer total_loss_count = entity.getTotal_loss_count();
        if (total_loss_count != null) {
            stmt.bindLong(5, total_loss_count);
        }
 
        Integer attack_won_count = entity.getAttack_won_count();
        if (attack_won_count != null) {
            stmt.bindLong(6, attack_won_count);
        }
 
        Integer defend_won_count = entity.getDefend_won_count();
        if (defend_won_count != null) {
            stmt.bindLong(7, defend_won_count);
        }
 
        Integer btype_pitched_count = entity.getBtype_pitched_count();
        if (btype_pitched_count != null) {
            stmt.bindLong(8, btype_pitched_count);
        }
 
        Integer btype_ambush_count = entity.getBtype_ambush_count();
        if (btype_ambush_count != null) {
            stmt.bindLong(9, btype_ambush_count);
        }
 
        Integer btype_seige_count = entity.getBtype_seige_count();
        if (btype_seige_count != null) {
            stmt.bindLong(10, btype_seige_count);
        }
 
        Integer btype_razing_count = entity.getBtype_razing_count();
        if (btype_razing_count != null) {
            stmt.bindLong(11, btype_razing_count);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public King readEntity(Cursor cursor, int offset) {
        King entity = new King( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // rating
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // total_won_count
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // total_loss_count
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // attack_won_count
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // defend_won_count
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // btype_pitched_count
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // btype_ambush_count
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // btype_seige_count
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // btype_razing_count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, King entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRating(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setTotal_won_count(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTotal_loss_count(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAttack_won_count(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDefend_won_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBtype_pitched_count(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBtype_ambush_count(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBtype_seige_count(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBtype_razing_count(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(King entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(King entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
