package com.thuoghtworks.android.challenge.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BATTLE".
*/
public class BattleDao extends AbstractDao<Battle, Long> {

    public static final String TABLENAME = "BATTLE";

    /**
     * Properties of entity Battle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Region = new Property(1, String.class, "region", false, "REGION");
        public final static Property Attacker_outcome = new Property(2, String.class, "attacker_outcome", false, "ATTACKER_OUTCOME");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property Attacker_commander = new Property(4, String.class, "attacker_commander", false, "ATTACKER_COMMANDER");
        public final static Property Defender_size = new Property(5, String.class, "defender_size", false, "DEFENDER_SIZE");
        public final static Property Major_capture = new Property(6, Integer.class, "major_capture", false, "MAJOR_CAPTURE");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Year = new Property(8, Integer.class, "year", false, "YEAR");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
        public final static Property Defender_king = new Property(10, String.class, "defender_king", false, "DEFENDER_KING");
        public final static Property Attacker_size = new Property(11, String.class, "attacker_size", false, "ATTACKER_SIZE");
        public final static Property Attacker_king = new Property(12, String.class, "attacker_king", false, "ATTACKER_KING");
        public final static Property Attacker_1 = new Property(13, String.class, "attacker_1", false, "ATTACKER_1");
        public final static Property Defender_1 = new Property(14, String.class, "defender_1", false, "DEFENDER_1");
        public final static Property Major_death = new Property(15, Integer.class, "major_death", false, "MAJOR_DEATH");
        public final static Property Defender_3 = new Property(16, String.class, "defender_3", false, "DEFENDER_3");
        public final static Property Defender_2 = new Property(17, String.class, "defender_2", false, "DEFENDER_2");
        public final static Property Defender_4 = new Property(18, String.class, "defender_4", false, "DEFENDER_4");
        public final static Property Battle_type = new Property(19, String.class, "battle_type", false, "BATTLE_TYPE");
        public final static Property Summer = new Property(20, String.class, "summer", false, "SUMMER");
        public final static Property Battle_number = new Property(21, Integer.class, "battle_number", false, "BATTLE_NUMBER");
        public final static Property Defender_commander = new Property(22, String.class, "defender_commander", false, "DEFENDER_COMMANDER");
        public final static Property Attacker_2 = new Property(23, String.class, "attacker_2", false, "ATTACKER_2");
        public final static Property Attacker_3 = new Property(24, String.class, "attacker_3", false, "ATTACKER_3");
        public final static Property Attacker_4 = new Property(25, String.class, "attacker_4", false, "ATTACKER_4");
        public final static Property Attacker_king_id = new Property(26, Integer.class, "attacker_king_id", false, "ATTACKER_KING_ID");
        public final static Property Defender_king_id = new Property(27, Integer.class, "defender_king_id", false, "DEFENDER_KING_ID");
        public final static Property Winner_king_id = new Property(28, Integer.class, "winner_king_id", false, "WINNER_KING_ID");
    };


    public BattleDao(DaoConfig config) {
        super(config);
    }
    
    public BattleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BATTLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REGION\" TEXT," + // 1: region
                "\"ATTACKER_OUTCOME\" TEXT," + // 2: attacker_outcome
                "\"LOCATION\" TEXT," + // 3: location
                "\"ATTACKER_COMMANDER\" TEXT," + // 4: attacker_commander
                "\"DEFENDER_SIZE\" TEXT," + // 5: defender_size
                "\"MAJOR_CAPTURE\" INTEGER," + // 6: major_capture
                "\"NAME\" TEXT," + // 7: name
                "\"YEAR\" INTEGER," + // 8: year
                "\"NOTE\" TEXT," + // 9: note
                "\"DEFENDER_KING\" TEXT," + // 10: defender_king
                "\"ATTACKER_SIZE\" TEXT," + // 11: attacker_size
                "\"ATTACKER_KING\" TEXT," + // 12: attacker_king
                "\"ATTACKER_1\" TEXT," + // 13: attacker_1
                "\"DEFENDER_1\" TEXT," + // 14: defender_1
                "\"MAJOR_DEATH\" INTEGER," + // 15: major_death
                "\"DEFENDER_3\" TEXT," + // 16: defender_3
                "\"DEFENDER_2\" TEXT," + // 17: defender_2
                "\"DEFENDER_4\" TEXT," + // 18: defender_4
                "\"BATTLE_TYPE\" TEXT," + // 19: battle_type
                "\"SUMMER\" TEXT," + // 20: summer
                "\"BATTLE_NUMBER\" INTEGER," + // 21: battle_number
                "\"DEFENDER_COMMANDER\" TEXT," + // 22: defender_commander
                "\"ATTACKER_2\" TEXT," + // 23: attacker_2
                "\"ATTACKER_3\" TEXT," + // 24: attacker_3
                "\"ATTACKER_4\" TEXT," + // 25: attacker_4
                "\"ATTACKER_KING_ID\" INTEGER," + // 26: attacker_king_id
                "\"DEFENDER_KING_ID\" INTEGER," + // 27: defender_king_id
                "\"WINNER_KING_ID\" INTEGER);"); // 28: winner_king_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BATTLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Battle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(2, region);
        }
 
        String attacker_outcome = entity.getAttacker_outcome();
        if (attacker_outcome != null) {
            stmt.bindString(3, attacker_outcome);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String attacker_commander = entity.getAttacker_commander();
        if (attacker_commander != null) {
            stmt.bindString(5, attacker_commander);
        }
 
        String defender_size = entity.getDefender_size();
        if (defender_size != null) {
            stmt.bindString(6, defender_size);
        }
 
        Integer major_capture = entity.getMajor_capture();
        if (major_capture != null) {
            stmt.bindLong(7, major_capture);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(9, year);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
 
        String defender_king = entity.getDefender_king();
        if (defender_king != null) {
            stmt.bindString(11, defender_king);
        }
 
        String attacker_size = entity.getAttacker_size();
        if (attacker_size != null) {
            stmt.bindString(12, attacker_size);
        }
 
        String attacker_king = entity.getAttacker_king();
        if (attacker_king != null) {
            stmt.bindString(13, attacker_king);
        }
 
        String attacker_1 = entity.getAttacker_1();
        if (attacker_1 != null) {
            stmt.bindString(14, attacker_1);
        }
 
        String defender_1 = entity.getDefender_1();
        if (defender_1 != null) {
            stmt.bindString(15, defender_1);
        }
 
        Integer major_death = entity.getMajor_death();
        if (major_death != null) {
            stmt.bindLong(16, major_death);
        }
 
        String defender_3 = entity.getDefender_3();
        if (defender_3 != null) {
            stmt.bindString(17, defender_3);
        }
 
        String defender_2 = entity.getDefender_2();
        if (defender_2 != null) {
            stmt.bindString(18, defender_2);
        }
 
        String defender_4 = entity.getDefender_4();
        if (defender_4 != null) {
            stmt.bindString(19, defender_4);
        }
 
        String battle_type = entity.getBattle_type();
        if (battle_type != null) {
            stmt.bindString(20, battle_type);
        }
 
        String summer = entity.getSummer();
        if (summer != null) {
            stmt.bindString(21, summer);
        }
 
        Integer battle_number = entity.getBattle_number();
        if (battle_number != null) {
            stmt.bindLong(22, battle_number);
        }
 
        String defender_commander = entity.getDefender_commander();
        if (defender_commander != null) {
            stmt.bindString(23, defender_commander);
        }
 
        String attacker_2 = entity.getAttacker_2();
        if (attacker_2 != null) {
            stmt.bindString(24, attacker_2);
        }
 
        String attacker_3 = entity.getAttacker_3();
        if (attacker_3 != null) {
            stmt.bindString(25, attacker_3);
        }
 
        String attacker_4 = entity.getAttacker_4();
        if (attacker_4 != null) {
            stmt.bindString(26, attacker_4);
        }
 
        Integer attacker_king_id = entity.getAttacker_king_id();
        if (attacker_king_id != null) {
            stmt.bindLong(27, attacker_king_id);
        }
 
        Integer defender_king_id = entity.getDefender_king_id();
        if (defender_king_id != null) {
            stmt.bindLong(28, defender_king_id);
        }
 
        Integer winner_king_id = entity.getWinner_king_id();
        if (winner_king_id != null) {
            stmt.bindLong(29, winner_king_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Battle readEntity(Cursor cursor, int offset) {
        Battle entity = new Battle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // region
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // attacker_outcome
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // attacker_commander
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // defender_size
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // major_capture
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // year
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // note
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // defender_king
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // attacker_size
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // attacker_king
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // attacker_1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // defender_1
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // major_death
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // defender_3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // defender_2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // defender_4
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // battle_type
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // summer
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // battle_number
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // defender_commander
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // attacker_2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // attacker_3
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // attacker_4
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // attacker_king_id
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // defender_king_id
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28) // winner_king_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Battle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRegion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttacker_outcome(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttacker_commander(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDefender_size(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMajor_capture(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setYear(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDefender_king(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAttacker_size(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAttacker_king(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAttacker_1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDefender_1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMajor_death(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setDefender_3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDefender_2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDefender_4(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBattle_type(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSummer(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBattle_number(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setDefender_commander(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAttacker_2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAttacker_3(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setAttacker_4(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setAttacker_king_id(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setDefender_king_id(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setWinner_king_id(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Battle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Battle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
